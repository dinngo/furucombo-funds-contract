image: node:14-buster

cache: &global_cache
  key: ${CI_PROJECT_PATH_SLUG}
  paths:
    - node_modules/

before_script:
  - yarn
  - RUNNER_COUNT=4
  - FILES=( $(find -H -L ./test/* -regex "^.*.test.js") )
  - len=${#FILES[@]}
  - >
    for (( i=0; i<${RUNNER_COUNT}; i+=1 )); do
        RUNNER_TEST_CNTS[$i]=0
    done
  - >
    for (( i=0; i<${len}; i+=1 )); do
        TestCases[$i]=$(grep -o " it" ${FILES[$i]} | wc -l)
    done
  - >
    for ((i = 0; i<${len}; i++))
    do
        for((j = 0; j<${len}-i-1; j++))
        do
            if [ ${TestCases[j]} -lt ${TestCases[$((j+1))]} ]
            then
                # swap
                temp=${TestCases[j]}
                TestCases[$j]=${TestCases[$((j+1))]}
                TestCases[$((j+1))]=$temp

                temp=${FILES[j]}
                FILES[$j]=${FILES[$((j+1))]}
                FILES[$((j+1))]=$temp
            fi
        done
    done
  - MIN=${RUNNER_TEST_CNTS[0]}
  - MINIDX=0
  - >
    for (( i=0; i<${len}; i+=1 )); do
        for j in ${!RUNNER_TEST_CNTS[@]};
        do
            if [ ${MIN} -gt ${RUNNER_TEST_CNTS[$j]} ]
            then
                MIN=${RUNNER_TEST_CNTS[${j}]}
                MINIDX=${j}
            fi
        done

        UNITTEST_FILES[$MINIDX]+=' '"${FILES[$i]}"
        RUNNER_TEST_CNTS[$MINIDX]=`expr ${TestCases[$i]} + ${RUNNER_TEST_CNTS[$MINIDX]}`
        MIN=${RUNNER_TEST_CNTS[$MINIDX]}
    done

stages:
  - build
  - test
  - deploy

build:
  stage: build
  tags:
    - docker
  script:
    - npm run build
    - npm run check
  cache:
    <<: *global_cache

test_0:
  stage: test
  tags:
    - docker
  script:
    - apt-get update && apt-get install -y netcat
    - npm run test ${UNITTEST_FILES[0]}
  cache:
    <<: *global_cache

test_1:
  stage: test
  tags:
    - docker
  script:
    - apt-get update && apt-get install -y netcat
    - npm run test ${UNITTEST_FILES[1]}
  cache:
    <<: *global_cache

test_2:
  stage: test
  tags:
    - docker
  script:
    - apt-get update && apt-get install -y netcat
    - npm run test ${UNITTEST_FILES[2]}
  cache:
    <<: *global_cache

test_3:
  stage: test
  tags:
    - docker
  script:
    - apt-get update && apt-get install -y netcat
    - npm run test ${UNITTEST_FILES[3]}
  cache:
    <<: *global_cache

deploy:
  stage: deploy
  tags:
    - docker
  script:
    - apt-get update && apt-get install -y netcat
    - npm run deploy
  cache:
    <<: *global_cache
